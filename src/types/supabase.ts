/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/case_comments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.case_comments.id"];
          created_at?: parameters["rowFilter.case_comments.created_at"];
          message?: parameters["rowFilter.case_comments.message"];
          user_id?: parameters["rowFilter.case_comments.user_id"];
          case_id?: parameters["rowFilter.case_comments.case_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["case_comments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** case_comments */
          case_comments?: definitions["case_comments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.case_comments.id"];
          created_at?: parameters["rowFilter.case_comments.created_at"];
          message?: parameters["rowFilter.case_comments.message"];
          user_id?: parameters["rowFilter.case_comments.user_id"];
          case_id?: parameters["rowFilter.case_comments.case_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.case_comments.id"];
          created_at?: parameters["rowFilter.case_comments.created_at"];
          message?: parameters["rowFilter.case_comments.message"];
          user_id?: parameters["rowFilter.case_comments.user_id"];
          case_id?: parameters["rowFilter.case_comments.case_id"];
        };
        body: {
          /** case_comments */
          case_comments?: definitions["case_comments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/cases": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cases.id"];
          created_at?: parameters["rowFilter.cases.created_at"];
          title?: parameters["rowFilter.cases.title"];
          description?: parameters["rowFilter.cases.description"];
          created_by?: parameters["rowFilter.cases.created_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cases"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cases */
          cases?: definitions["cases"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cases.id"];
          created_at?: parameters["rowFilter.cases.created_at"];
          title?: parameters["rowFilter.cases.title"];
          description?: parameters["rowFilter.cases.description"];
          created_by?: parameters["rowFilter.cases.created_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cases.id"];
          created_at?: parameters["rowFilter.cases.created_at"];
          title?: parameters["rowFilter.cases.title"];
          description?: parameters["rowFilter.cases.description"];
          created_by?: parameters["rowFilter.cases.created_by"];
        };
        body: {
          /** cases */
          cases?: definitions["cases"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/role_permissions": {
    get: {
      parameters: {
        query: {
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["role_permissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_roles": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          email?: parameters["rowFilter.users.email"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          status?: parameters["rowFilter.users.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          email?: parameters["rowFilter.users.email"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          status?: parameters["rowFilter.users.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          email?: parameters["rowFilter.users.email"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          status?: parameters["rowFilter.users.status"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/authorize": {
    post: {
      parameters: {
        body: {
          args: {
            requested_permission: string;
            user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: any };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  /** Comment sent by a user for a case. */
  case_comments: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    message?: string;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Note:
     * This is a Foreign Key to `cases.id`.<fk table='cases' column='id'/>
     */
    case_id: number;
  };
  /** User created cases. */
  cases: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    title: string;
    description?: string;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    created_by: string;
  };
  /** Application permissions for each role. */
  role_permissions: {
    role: "admin" | "moderator";
    permission: "cases.delete" | "case_comments.delete";
  };
  /** Application roles for each user. */
  user_roles: {
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    role: "admin" | "moderator";
  };
  /** Profile data for each user. */
  users: {
    /**
     * References the internal Supabase Auth user.
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    username?: string;
    email?: string;
    avatar_url?: string;
    updated_at?: string;
    status?: "ONLINE" | "OFFLINE";
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** case_comments */
  "body.case_comments": definitions["case_comments"];
  "rowFilter.case_comments.id": string;
  "rowFilter.case_comments.created_at": string;
  "rowFilter.case_comments.message": string;
  "rowFilter.case_comments.user_id": string;
  "rowFilter.case_comments.case_id": string;
  /** cases */
  "body.cases": definitions["cases"];
  "rowFilter.cases.id": string;
  "rowFilter.cases.created_at": string;
  "rowFilter.cases.title": string;
  "rowFilter.cases.description": string;
  "rowFilter.cases.created_by": string;
  /** role_permissions */
  "body.role_permissions": definitions["role_permissions"];
  "rowFilter.role_permissions.role": string;
  "rowFilter.role_permissions.permission": string;
  /** user_roles */
  "body.user_roles": definitions["user_roles"];
  "rowFilter.user_roles.user_id": string;
  "rowFilter.user_roles.role": string;
  /** users */
  "body.users": definitions["users"];
  /** References the internal Supabase Auth user. */
  "rowFilter.users.id": string;
  "rowFilter.users.username": string;
  "rowFilter.users.email": string;
  "rowFilter.users.avatar_url": string;
  "rowFilter.users.updated_at": string;
  "rowFilter.users.status": string;
}

export interface operations {}

export interface external {}
